"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { useUser } from "@/lib/user-context"
import { CheckCircle, XCircle } from "lucide-react"

interface QuizSectionProps {
  courseId: string
}

interface Question {
  id: number
  text: string
  options: string[]
  correctAnswer: number
}

export default function QuizSection({ courseId }: QuizSectionProps) {
  const { userProgress, completeModule } = useUser()
  const [quizStarted, setQuizStarted] = useState(false)
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null)
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [score, setScore] = useState(0)

  const isCompleted = userProgress.completedCourses.includes(courseId)

  // Mock questions - in a real app, these would be generated by AI
  const questions: Question[] = [
    {
      id: 1,
      text: "What is the main advantage of Solana's blockchain?",
      options: [
        "High transaction fees",
        "Low throughput",
        "High speed and low transaction costs",
        "Limited smart contract functionality",
      ],
      correctAnswer: 2,
    },
    {
      id: 2,
      text: "What programming language is primarily used for Solana development?",
      options: ["JavaScript", "Rust", "Python", "Solidity"],
      correctAnswer: 1,
    },
    {
      id: 3,
      text: "What is a Solana Program?",
      options: [
        "A JavaScript library",
        "A smart contract deployed on the Solana blockchain",
        "A desktop application",
        "A mobile app for Solana users",
      ],
      correctAnswer: 1,
    },
  ]

  const startQuiz = () => {
    setQuizStarted(true)
    setCurrentQuestion(0)
    setSelectedAnswer(null)
    setIsCorrect(null)
    setQuizCompleted(false)
    setScore(0)
  }

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex)
    const correct = answerIndex === questions[currentQuestion].correctAnswer
    setIsCorrect(correct)
    if (correct) {
      setScore((prev) => prev + 1)
    }
  }

  const handleNextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion((prev) => prev + 1)
      setSelectedAnswer(null)
      setIsCorrect(null)
    } else {
      setQuizCompleted(true)
      if (score + (isCorrect ? 1 : 0) >= 2) {
        completeModule(courseId)
      }
    }
  }

  if (isCompleted) {
    return (
      <div className="mt-6 text-center">
        <div className="h-16 w-16 mx-auto bg-green-600/20 rounded-full flex items-center justify-center mb-3">
          <CheckCircle className="h-8 w-8 text-green-500" />
        </div>
        <h3 className="text-lg font-bold text-white mb-1">Course Completed!</h3>
        <p className="text-purple-300 text-sm mb-4">You've already earned your proof of learning for this course.</p>
        <Button className="w-full bg-gradient-to-r from-purple-600 to-cyan-600 hover:from-purple-700 hover:to-cyan-700">
          View Certificate
        </Button>
      </div>
    )
  }

  if (!quizStarted) {
    return (
      <div className="mt-6">
        <Button
          onClick={startQuiz}
          className="w-full bg-gradient-to-r from-purple-600 to-cyan-600 hover:from-purple-700 hover:to-cyan-700"
        >
          Take Quiz
        </Button>
      </div>
    )
  }

  if (quizCompleted) {
    const passed = score >= 2

    return (
      <div className="mt-6 text-center">
        <div
          className={`h-16 w-16 mx-auto ${passed ? "bg-green-600/20" : "bg-red-600/20"} rounded-full flex items-center justify-center mb-3`}
        >
          {passed ? <CheckCircle className="h-8 w-8 text-green-500" /> : <XCircle className="h-8 w-8 text-red-500" />}
        </div>
        <h3 className="text-lg font-bold text-white mb-1">{passed ? "Quiz Passed!" : "Quiz Failed"}</h3>
        <p className="text-purple-300 text-sm mb-2">
          You scored {score}/{questions.length}
        </p>
        {passed ? (
          <p className="text-green-400 text-sm mb-4">You've earned your proof of learning!</p>
        ) : (
          <p className="text-red-400 text-sm mb-4">Try again to earn your proof of learning.</p>
        )}

        <Button
          onClick={startQuiz}
          variant="outline"
          className="w-full border-purple-700 text-white hover:bg-purple-900/30 mb-3"
        >
          Try Again
        </Button>

        {passed && (
          <Button className="w-full bg-gradient-to-r from-purple-600 to-cyan-600 hover:from-purple-700 hover:to-cyan-700">
            Mint NFT Certificate
          </Button>
        )}
      </div>
    )
  }

  return (
    <div className="mt-6">
      <div className="mb-4">
        <div className="flex justify-between text-sm text-purple-300 mb-2">
          <span>
            Question {currentQuestion + 1}/{questions.length}
          </span>
          <span>Score: {score}</span>
        </div>
        <div className="w-full bg-purple-950/50 h-2 rounded-full overflow-hidden">
          <div
            className="h-full bg-gradient-to-r from-purple-600 to-cyan-600"
            style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
          ></div>
        </div>
      </div>

      <div className="mb-4">
        <h3 className="text-white font-medium mb-3">{questions[currentQuestion].text}</h3>
        <div className="space-y-2">
          {questions[currentQuestion].options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              disabled={selectedAnswer !== null}
              className={`w-full text-left p-3 rounded-md border transition-colors ${
                selectedAnswer === index
                  ? index === questions[currentQuestion].correctAnswer
                    ? "bg-green-600/20 border-green-500 text-white"
                    : "bg-red-600/20 border-red-500 text-white"
                  : "bg-purple-950/30 border-purple-900/30 text-purple-300 hover:bg-purple-900/30 hover:text-white"
              }`}
            >
              {option}
            </button>
          ))}
        </div>
      </div>

      {selectedAnswer !== null && (
        <div
          className={`p-3 rounded-md mb-4 ${isCorrect ? "bg-green-600/20 text-green-400" : "bg-red-600/20 text-red-400"}`}
        >
          {isCorrect
            ? "Correct answer!"
            : `Incorrect. The correct answer is: ${questions[currentQuestion].options[questions[currentQuestion].correctAnswer]}`}
        </div>
      )}

      <Button
        onClick={handleNextQuestion}
        disabled={selectedAnswer === null}
        className="w-full bg-gradient-to-r from-purple-600 to-cyan-600 hover:from-purple-700 hover:to-cyan-700 disabled:opacity-50"
      >
        {currentQuestion < questions.length - 1 ? "Next Question" : "Complete Quiz"}
      </Button>
    </div>
  )
}
